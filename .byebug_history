buckets.flatten
buckets
buckets.flatten
buckets
comp
buckets.reject { |arr| arr.length == 0 }
buckets[0...500].reject { |arr| arr.length == 0 }
buckets[0...500]
buckets[0...50]
buckets
comp
sorted
sorted[48..50]
comp
sorted
comp
min
max
tmp
buckets
bucket_count
min
max
arr
to_sort
toSort
tosort
arr
compare
sorted
arr
sorted
arr
comp
exceptions
@@sort_exceptions[self.name]
self.name
sym
@@sort_exceptions
self.name
self.class.name
min
arr
n
c
arr
c
arr
c
arr
sorted
comp
arr.length
comp
0.456.to_d.truncate
comp
item%0.001/0.0001
item%0.01/0.001
item%0.01
item%100
item*100
item/n
item%m
item
sorted[7]
sorted[6]
comp
(item*n).to_f%10
(item*n)%10
item*n
item
digit
comp
((0.57*100)%10).round
((0.57*100)%10)
((0.57*100)%10).truncate
((0.563*100)%10).truncate
((0.57*100)%10).truncate
((0.563*1000)%10).truncate
((0.57*1000)%10).truncate
sorted[55]
sorted
comp
((1234.567*10000)%10).truncate
((1234.567*0.0001)%10).truncate
((1234.567*0.001)%10).truncate
((1234.567*0.01)%10).truncate
((1234.567*0.1)%10).truncate
((1234.567*1)%10).truncate
((1234.567*10)%10).truncate
((1234.567*100)%10).truncate
((1234.567*1000)%10).truncate
(1234.567*1000)%10.truncate
(1234.567*1000)%10
1234.567*1000
comp
sorted
0.92*m**-1
0.92*n**-1
0.92*n
0.92%0.1
0.92%m
0.921%m
((0.921%(10*m))/(10*n))
((0.92%(10*m))/(10*n))
((0.921%(10*m))/(10*n)).truncate
((0.92%(10*m))/(10*n)).truncate
((0.921%m)/n).truncate
((0.92%m)/n).truncate
(0.92%m)/n.truncate
(0.921%m)/n
(0.92%m)/n
(0.92%m)
(0.91%0.01)
sorted[87]
comp
sorted
(0.06%0.01)
0.06.coerce(3)
0.06.truncate(3)
0.06.precision(3)
0.06.round(3)
(0.06%0.01)
(0.06%0.01)/0.001
(0.06%10**-2)/10**-3
sorted
9.9.truncate
1.9.truncate
sorted
comp
sorted
n
m
digit
item
comp
1.9.round
2.1.round
(1.345%m)/n
(1.345%m)/2
m
n.to_s
n
s
exp
input_arr
0.911/0.1
0.92/0.1
sorted
arr.length
comp
sorted
sorted[452]
sorted[451]
sorted[450]
comp
sorted
min
ele
n
ele.to_s
(ele-ele.round(0))
(ele)
(ele%1)
(ele%1).length
(ele%1).to_s
(ele%1).to_s.length - 2
ele
s
min
-min
sorted
sorted.to_s
sorted
sorted[37]
sorted[36]
compare[36]
comp[0]
sorted[0]
bkts[0]
control[0]
sorted[0]
sorted[i]
control[555]
sorted[555]
sorted[1]
control[0]
sorted[0]
control.min
sorted.min
arr.min
arr.sort
arr
bkts[0]
bkts[0
bkts
keys
buckets.keys.sort{ |a,b| b <=> a } 
buckets.keys.sort
arr.sort
sorted
n
result
n
result
s
result
s
result
s
buckets
s
arr
s
result
s
result
reult
s
arr
s
result
s
result
s
order
s
buckets
s
order
s
arr
s
order
s
order
s
arr
s
result
s
arr
s
buckets
s
order
s
arr
s
char
s
char
arr[i]
s
item
order
